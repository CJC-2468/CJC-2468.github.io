<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式缓存 on </title>
    <link>https://example.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</link>
    <description>Recent content in 分布式缓存 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 23 Apr 2022 09:28:32 +0800</lastBuildDate><atom:link href="https://example.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用Go实现分布式缓存easyCache</title>
      <link>https://example.com/post/%E7%94%A8go%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98easycache/</link>
      <pubDate>Sat, 23 Apr 2022 09:28:32 +0800</pubDate>
      
      <guid>https://example.com/post/%E7%94%A8go%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98easycache/</guid>
      
        <description>常见用来做分布式缓存的有redis和memcached，这篇主要先简单介绍memcached，然后介绍一个用Go语言实现的分布式缓存easycache，会涉及到其设计思想，具体实现，适用场景等，总体上借鉴了groupcache，groupcache是go版的memcached，在有些设计上做了很多简化和优化，他们的作者是同一个人。
MemCached 简介 MemCache是一个自由、源码开放、高性能、分布式的分布式内存对象缓存系统，它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高了网站访问的速度，减轻数据库的负载。
使用场景 在访问量高的Web网站和应用中使用MemCache，用来缓解数据库的压力，并且提升网站和应用的响应速度，例如页面缓存，访问频繁的数据库数据（身份token、首页动态），搜索的查询条件和结果（热门搜索的内容缓存起来）。
工作流程 存取数据分两步：第一步，选择服务器，第二步存取数据。
如下图，
  客户端请求数据，</description>
      
    </item>
    
  </channel>
</rss>